#pragma once

/**
 * SPDX-License-Identifier: GPL-3.0-or-later
 * Copyright 2020 Â© Fabian KlÃ¶tzl
 *
 * C++ convenience header
 */

#if __cplusplus < 201703L
#error "This header requires C++17"
#endif

#include <array>
#include <cstddef>
#include <dna.h>
#include <string>
#include <string_view>
#include <vector>

namespace dna
{
char *
begin(std::string &str)
{
	return str.data();
}

char *
end(std::string &str)
{
	return str.data() + str.size();
}

const char *
begin(std::string_view str)
{
	return str.data();
}

const char *
end(std::string_view str)
{
	return str.data() + str.size();
}

const char *
cbegin(std::string_view str)
{
	return str.data();
}

const char *
cend(std::string_view str)
{
	return str.data() + str.size();
}

int
version()
{
	return dna_version();
}
} // namespace dna

namespace dna4
{
size_t
count_mismatches(std::string_view s1, std::string_view s2)
{
	// assume s1.size() == s2.size()
	return dna4_count_mismatches(
		dna::cbegin(s1), dna::cend(s1), dna::cbegin(s2));
}

std::string
revcomp(std::string_view str)
{
	auto ret = std::string(str.size(), '\0');
	dna4_revcomp(dna::cbegin(str), dna::cend(str), dna::begin(ret));
	return ret;
}

uint64_t
pack_2bits(size_t k, std::string_view str)
{
	return dna4_pack_2bits(dna::cbegin(str), k);
}

std::string
unpack_2bits(size_t k, uint64_t packed)
{
	auto ret = std::string(k, '\0');
	dna4_unpack_2bits(dna::begin(ret), k, packed);
	return ret;
}
} // namespace dna4

namespace dnax
{

auto
pack_4bits(std::string_view str)
{
	auto ret = std::vector<unsigned char>((str.size() + 1) / 2, '\0');
	auto encoded = dnax_pack_4bits(dna::cbegin(str), dna::cend(str), ret.data());
	auto bytes = (encoded + 1) / 2;
	ret.erase(ret.begin() + bytes, ret.end());
	return ret;
}

auto
unpack_4bits(const std::vector<unsigned char> &vec)
{
	auto ret = std::string(vec.size() * 2, '\0');
	dnax_unpack_4bits(vec.data(), vec.data() + vec.size(), dna::begin(ret));
	return ret;
}

std::string
revcomp(const char *table, std::string_view str)
{
	auto ret = std::string(str.size(), '\0');
	auto end =
		dnax_revcomp(table, dna::cbegin(str), dna::cend(str), dna::begin(ret));
	ret.erase(ret.begin() + (end - dna::begin(ret)), ret.end());
	return ret;
}

std::string
translate(std::string_view str)
{
	auto ret = std::string(str.size() / 3, '\0');
	auto end =
		dnax_translate(dna::cbegin(str), dna::cend(str), dna::begin(ret));
	ret.erase(ret.begin() + (end - dna::begin(ret)), ret.end());
	return ret;
}

std::array<size_t, 256>
count(std::string_view str)
{
	auto ret = std::array<size_t, 256>();
	dnax_count(std::begin(ret), dna::cbegin(str), dna::end(str));
	return ret;
}

std::string
extract_dna4(std::string_view str)
{
	auto ret = std::string(str.size(), '\0');
	auto end =
		dnax_extract_dna4(dna::cbegin(str), dna::cend(str), dna::begin(ret));
	ret.erase(ret.begin() + (end - dna::begin(ret)), ret.end());
	return ret;
}

std::string
replace(const char *table, std::string_view str)
{
	auto ret = std::string(str.size(), '\0');
	auto end =
		dnax_replace(table, dna::cbegin(str), dna::cend(str), dna::begin(ret));
	ret.erase(ret.begin() + (end - dna::begin(ret)), ret.end());
	return ret;
}

std::string_view::size_type
find_first_mismatch(std::string_view s1, std::string_view s2)
{
	auto pos = dnax_find_first_mismatch(
		dna::cbegin(s1), dna::cend(s1), dna::cbegin(s2));
	return pos - dna::cbegin(s1);
}

std::string_view::size_type
find_first_of(const char *table, std::string_view str)
{
	auto pos = dnax_find_first_of(table, dna::cbegin(str), dna::cend(str));
	return pos - dna::cbegin(str);
}

std::string_view::size_type
find_first_not_of(const char *table, std::string_view str)
{
	auto pos = dnax_find_first_not_of(table, dna::cbegin(str), dna::cend(str));
	return pos - dna::cbegin(str);
}

} // namespace dnax
